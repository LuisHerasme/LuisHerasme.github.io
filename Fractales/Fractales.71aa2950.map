{"version":3,"sources":["Complex.js","Color.js","index.js"],"names":["Complex","real","imaginary","Re","Im","other","r","g","b","q","p","hue2rgb","t","hslToRgb","h","s","l","Math","round","n","z","col","canvasWidth","canvasHeight","c","counter","N_ITERATION","N_MAX","canvas","document","getElementById","context","getContext","width","height","addEventListener","Number","value","index","canvasData","getImageData","drawPixel","x","y","a","data","set_pixel","w","generateFractal","scale","temp_canvas","createElement","temp_context","temp_data","fractal","add","getSquare","abs","imagedata_to_image","imagedata","ctx","putImageData","image","Image","src","toDataURL","get_img","i","img","body","appendChild","window","setInterval","cos","sin"],"mappings":"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","file":"Fractales.71aa2950.map","sourceRoot":"..","sourcesContent":["class Complex {\r\n  constructor(real, imaginary) {\r\n    this.Re = real;\r\n    this.Im = imaginary;\r\n  }\r\n\r\n  add(other) {\r\n    this.Re += other.Re;\r\n    this.Im += other.Im;\r\n  }\r\n\r\n  copy() {\r\n    return new Complex(this.Re, this.Im);\r\n  }\r\n\r\n  square() {\r\n    this.Re = this.Re * this.Re - this.Im * this.Im;\r\n    this.Im = 2 * this.Im * this.Re;\r\n  }\r\n\r\n  getSquare() {\r\n    return new Complex(\r\n      this.Re * this.Re - this.Im * this.Im,\r\n      2 * this.Im * this.Re\r\n    );\r\n  }\r\n}\r\n\r\nexport default Complex;\r\n","var r, g, b, q, p;\r\nfunction hue2rgb(p, q, t) {\r\n  if (t < 0) {\r\n    t += 1;\r\n  }\r\n\r\n  if (t > 1) {\r\n    t -= 1;\r\n  }\r\n\r\n  if (t < 1 / 6) {\r\n    return p + (q - p) * 6 * t;\r\n  }\r\n\r\n  if (t < 1 / 2) {\r\n    return q;\r\n  }\r\n\r\n  if (t < 2 / 3) {\r\n    return p + (q - p) * (2 / 3 - t) * 6;\r\n  }\r\n\r\n  return p;\r\n}\r\n\r\nfunction hslToRgb(h, s, l) {\r\n  if (s == 0) {\r\n    r = g = b = l; // achromatic\r\n  } else {\r\n    q = l < 0.5 ? l * (1 + s) : l + s - l * s;\r\n    p = 2 * l - q;\r\n    r = hue2rgb(p, q, h + 1 / 3);\r\n    g = hue2rgb(p, q, h);\r\n    b = hue2rgb(p, q, h - 1 / 3);\r\n  }\r\n  return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];\r\n}\r\nexport { hslToRgb };\r\n","/**\r\n *\r\n * TODO\r\n *\r\n * Add to options:\r\n *  Canvas resolution.\r\n *  Colors.\r\n *  N, Iterations\r\n *  N, Infinity\r\n *  Zoom\r\n */\r\n\r\nimport Complex from \"./Complex\";\r\nimport { hslToRgb } from \"./Color\";\r\n\r\nconst canvasWidth = 500;\r\nconst canvasHeight = 500;\r\nconst c = new Complex(-1, -0.3); //new Complex(-0.1, -0.3);\r\nlet n, z, col;\r\nlet counter = 0;\r\nlet N_ITERATION = 100;\r\nlet N_MAX = 2;\r\n\r\nconst canvas = document.getElementById(\"canvas\");\r\nconst context = canvas.getContext(\"2d\");\r\ncanvas.width = canvasWidth;\r\ncanvas.height = canvasHeight;\r\n\r\ndocument.getElementById(\"cambiar\").addEventListener(\"click\", () => {\r\n  c.Re = Number(document.getElementById(\"real\").value);\r\n  c.Im = Number(document.getElementById(\"im\").value);\r\n});\r\n\r\nvar canvasData = context.getImageData(0, 0, canvasWidth, canvasHeight);\r\n\r\nvar index;\r\nfunction drawPixel(x, y, r, g, b, a) {\r\n  index = (x + y * canvasWidth) * 4;\r\n  canvasData.data[index + 0] = r;\r\n  canvasData.data[index + 1] = g;\r\n  canvasData.data[index + 2] = b;\r\n  canvasData.data[index + 3] = a;\r\n}\r\n\r\nfunction set_pixel(data, w, x, y, r, g, b, a) {\r\n  index = (x + y * w) * 4;\r\n  data.data[index + 0] = r;\r\n  data.data[index + 1] = g;\r\n  data.data[index + 2] = b;\r\n  data.data[index + 3] = a;\r\n}\r\n\r\nwindow.generateFractal = generateFractal;\r\nwindow.context = context;\r\n\r\nfunction generateFractal(w, h, scale) {\r\n  const temp_canvas = document.createElement(\"canvas\");\r\n  const temp_context = temp_canvas.getContext(\"2d\");\r\n  temp_canvas.width = w;\r\n  temp_canvas.height = h;\r\n  let temp_data = temp_context.getImageData(0, 0, w, h);\r\n  temp_data = fractal(w, h, scale, temp_data);\r\n  /*\r\n  for (let x = 0; x < w; x++) {\r\n    for (let y = 0; y < h; y++) {\r\n      z = new Complex(scale * (x / w) - scale / 2, scale * (y / h) - scale / 2); // Zoom.\r\n      n = 0;\r\n\r\n      while (n < N_ITERATION) {\r\n        z.add(z.getSquare());\r\n        z.add(c);\r\n\r\n        if (Math.hypot(z.Re, z.Im) > N_MAX) {\r\n          break;\r\n        }\r\n\r\n        n++;\r\n      }\r\n\r\n      n = n / N_ITERATION + 0.0; // Color.\r\n      col = hslToRgb(n, 1, 0.5);\r\n      set_pixel(temp_data, w, x, y, col[0], col[1], col[2], n * 255);\r\n    }\r\n  }\r\n  */\r\n  return temp_data;\r\n}\r\n\r\nfunction fractal(width, height, scale, data) {\r\n  for (let x = 0; x < width; x++) {\r\n    for (let y = 0; y < height; y++) {\r\n      z = new Complex(\r\n        scale * (x / width) - scale / 2,\r\n        scale * (y / height) - scale / 2\r\n      );\r\n      n = 0;\r\n      while (n < N_ITERATION) {\r\n        z.add(z.getSquare());\r\n        z.add(c);\r\n        if (Math.abs(z.Re + z.Im) > N_MAX) break;\r\n        n++;\r\n      }\r\n      n = n / N_ITERATION + 0.0; // Color.\r\n      col = hslToRgb(n, 1, 0.5);\r\n      set_pixel(data, width, x, y, col[0], col[1], col[2], n * 255);\r\n    }\r\n  }\r\n  return data;\r\n}\r\n\r\nwindow.imagedata_to_image = imagedata_to_image;\r\nfunction imagedata_to_image(imagedata) {\r\n  var canvas = document.createElement(\"canvas\");\r\n  var ctx = canvas.getContext(\"2d\");\r\n  canvas.width = imagedata.width;\r\n  canvas.height = imagedata.height;\r\n  ctx.putImageData(imagedata, 0, 0);\r\n\r\n  var image = new Image();\r\n  image.src = canvas.toDataURL();\r\n  return image;\r\n}\r\n\r\nfunction get_img(w, h, scale) {\r\n  let i = generateFractal(w, h, scale);\r\n  let img = imagedata_to_image(i);\r\n  document.body.appendChild(img);\r\n}\r\nwindow.get_img = get_img;\r\n\r\nsetInterval(() => {\r\n  c.Im += Math.cos(counter) / 100;\r\n  c.Re += Math.sin(counter) / 100;\r\n  counter += 0.05;\r\n  context.putImageData(canvasData, 0, 0);\r\n  canvasData = fractal(canvasWidth, canvasHeight, 2, canvasData);\r\n  /*\r\n  for (let x = 0; x < canvasWidth; x++) {\r\n    for (let y = 0; y < canvasHeight; y++) {\r\n      z = new Complex(\r\n        3 * (x / canvasWidth) - 1.5,\r\n        3 * (y / canvasHeight) - 1.5\r\n      );\r\n      n = 0;\r\n      while (n < N_ITERATION) {\r\n        z.add(z.getSquare());\r\n        z.add(c);\r\n        if (Math.abs(z.Re + z.Im) > N_MAX) {\r\n          break;\r\n        }\r\n        n++;\r\n      }\r\n      n = n / N_ITERATION + 0.0;\r\n      col = hslToRgb(n, 1, 0.5);\r\n      drawPixel(x, y, col[0], col[1], col[2], n * 255);\r\n    }\r\n  }  */\r\n}, 1000 / 10);\r\n"]}